#---- Define Operations -------------------------------------------------------
operation.first.class = latis.ops.filter.FirstFilter
operation.first.usage = first()
operation.first.description = Return only the first sample.

operation.last.class = latis.ops.filter.LastFilter
operation.last.usage = last()
operation.last.description = Return only the last sample.

operation.limit.class = latis.ops.filter.TakeOperation
operation.limit.usage = limit(n)
operation.limit.description = Return the first n samples.

operation.take.class = latis.ops.filter.TakeOperation
operation.take.usage = take(n)
operation.take.description = Return the first n samples.

operation.take_right.class = latis.ops.filter.TakeRightOperation
operation.take_right.usage = take_right(n)
operation.take_right.description = Return the last n samples.

operation.drop.class = latis.ops.DropOperation
operation.drop.usage = drop(n)
operation.drop.description = Return all but the first n samples.

operation.stride.class = latis.ops.filter.StrideFilter
operation.stride.usage = stride(n)
operation.stride.description = Return every nth sample.

operation.binave.class = latis.ops.BinAverageByWidth
operation.binave.description = For internal use only.
# Too many caveats to offer in the public API.
#operation.binave.usage = binave(width)
#operation.binave.description = Consolidate the data by binning (by a given width) and averaging the values in each bin.

operation.integrate.class = latis.ops.NewtonCotesIntegration
operation.integrate.description = For internal use only.
#operation.integrate.usage = integrate(start,stop)
#operation.integrate.description = Apply a 4th degree Newton-Cotes integration to the spectra in a time series, given the optional range.
#TODO: range isn't working (LATIS-651); requires projecting only a single variable in the nested function's range

operation.convert.class = latis.ops.UnitConversion
operation.convert.description = Alias for convert_time.
operation.convert_time.class = latis.ops.UnitConversion
operation.convert_time.usage = convert_time(units), where units is duration units since an epoch (e.g. milliseconds since 1970-01-01)
operation.convert_time.description = Convert time values to the given units.

operation.format_time.class = latis.ops.TimeFormatter
operation.format_time.usage = format_time(format), e.g. format_time(yyyy-DD-mm'T'HH:mm:ss.SSS)
operation.format_time.description = Convert time values to the given format (for text output) \
as specified by <A href="https://docs.oracle.com/javase/8/docs/api/java/text/SimpleDateFormat.html" target="_blank"> Java's SimpleDateFormat.</A>

operation.rename.class = latis.ops.RenameOperation
operation.rename.usage = rename(orig,new)
operation.rename.description = Change the name of a variable given its original and new name.

operation.exclude_missing.class = latis.ops.filter.ExcludeMissing
operation.exclude_missing.usage = exclude_missing()
operation.exclude_missing.description = Exclude all samples that contain a missing value.

operation.replace_missing.class = latis.ops.ReplaceMissingOperation
operation.replace_missing.usage = replace_missing(value)
operation.replace_missing.description = Replace any missing value with the given value.

operation.select.class = latis.ops.filter.Selection
operation.select.description = For internal use only.
#Only used for tsml processing instructions.

operation.convertTimeTupleToTime.class = latis.ops.TimeTupleToTime
operation.convertTimeTupleToTime.description = For internal use only.
#Only used for tsml processing instructions.
#operation.convertTimeTupleToTime.description = If a Tuple named "time" containing Text elements for date and time elements is encountered in the Dataset, replace it with a Time Scalar of type Text.

operation.takeMaxVersion.class = latis.ops.TakeMaxVersion
operation.takeMaxVersion.description = For internal use only.
#Only used for tsml processing instructions.
#operation.takeMaxVersion.description = Given a Dataset of the form: index -> (time, version, ...) with multiple "version"s for the same "time," keep only the max version and return the dataset as: time -> (...).

operation.pivot.class = latis.ops.Pivot
operation.pivot.description = For internal use only.
#Only used for tsml processing instructions, for now.
#operation.pivot.description = Takes a function with a Tuple domain with a finite number of allowed values for one variable and reshapes the domain into a tuple indexed by those allowed values.

operation.derived.class = latis.ops.MathExpressionDerivation
operation.derived.description = For internal use only.
#Only used for tsml processing instructions, for now.
#operation.derived.description = Adds a new Variable to a Dataset according to the inputed math expression. The 'str' parameter must include the name of the new Variable followed by '=' and the expression.

operation.domBin.class = latis.ops.DomainBinner
operation.domBin.description = For internal use only.
#Only used for tsml processing instructions, for now.
#operation.domBin.description = Used for domains that represent a range of values but have only one explicit value. The domain will be mapped to a Tuple with 'start_name' and 'end_name' Variables.

operation.project.class = latis.ops.Projection
operation.project.description = For internal use only.
#Only used for tsml processing instructions.
